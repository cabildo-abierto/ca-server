generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "prisma-kysely"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AuthSession {
  key     String @id
  session String
}

model AuthState {
  key   String @id
  state String
}

enum MirrorStatus {
  Dirty
  InProcess
  Sync
  Failed
}

model User {
  did                        String       @id @db.VarChar(255) // https://atproto.com/guides/identity
  handle                     String?
  displayName                String?
  avatar                     String?
  banner                     String?
  email                      String?
  description                String?
  hasAccess                  Boolean      @default(false) // si tiene o no acceso al período de prueba
  inCA                       Boolean      @default(false)
  CAProfile                  Record?      @relation("CAProfile", fields: [CAProfileUri], references: [uri])
  CAProfileUri               String?      @unique
  mirrorStatus               MirrorStatus @default(Dirty) // estado del mirror, usado en atproto-sync
  createdAt                  DateTime     @default(now()) @map("created_at")
  editorStatus               EditorStatus @default(Beginner) // permisos de editor en la wiki
  platformAdmin              Boolean      @default(false) // si tiene acceso o no a /admin
  records                    Record[]
  blobs                      Blob[]
  followers                  Follow[]
  usedInviteCode             InviteCode?  @relation("invite-code-used")
  recommendCodes             InviteCode[] @relation("invite-codes-available") // los códigos de invitación que tiene disponibles para usar
  seenTutorial               Boolean      @default(false)
  seenTopicsTutorial         Boolean      @default(false)
  seenTopicMinimizedTutorial Boolean      @default(false)
  seenTopicMaximizedTutorial Boolean      @default(false)
  authorStatus               Json?

  hasReacted HasReacted[]

  userValidationHash String? @unique
  orgValidation      String?

  validationRequests ValidationRequest[]

  readSessions         ReadSession[] @relation("readUser")
  readSessionsReceived ReadSession[] @relation("readAuthor")

  donations Donation[]
  months    UserMonth[]

  notifications Notification[]

  lastSeenNotifications DateTime @default(dbgenerated("'1970-01-01 00:00:00'::timestamp"))

  moderationState ModerationState @default(Ok)

  drafts Draft[]

  algorithmConfig Json?

  notInterestedIn        NotInterested[] @relation("notInterested")
  subjectOfNotInterested NotInterested[] @relation("notInterestedSubject")

  @@index([handle])
  @@index([inCA])
  @@index([CAProfileUri])
}

model NotInterested {
  id       String @id @default(cuid())
  authorId String
  author   User   @relation("notInterested", fields: [authorId], references: [did])

  subjectId String
  subject   User   @relation("notInterestedSubject", fields: [subjectId], references: [did])

  @@index([authorId])
  @@index([subjectId])
  @@index([authorId, subjectId])
}

enum ModerationState {
  Ok
  ShadowBan
}

enum ValidationType {
  Persona
  Organizacion
}

enum ValidationRequestResult {
  Aceptada
  Rechazada
  Pendiente
}

model ValidationRequest {
  id            String                  @id @default(cuid())
  type          ValidationType
  userId        String
  user          User                    @relation(fields: [userId], references: [did])
  dniFrente     String?
  dniDorso      String?
  tipoOrg       String?
  sitioWeb      String?
  comentarios   String?
  email         String?
  documentacion String[]
  createdAt     DateTime                @default(now()) @map("created_at")
  result        ValidationRequestResult @default(Pendiente)
  rejectReason  String?

  @@unique([userId])
}

model InviteCode {
  code          String         @id @default(cuid())
  usedBy        User?          @relation("invite-code-used", fields: [usedByDid], references: [did])
  usedByDid     String?        @unique
  usedAt        DateTime?
  recommender   User?          @relation("invite-codes-available", fields: [recommenderId], references: [did])
  recommenderId String?
  accessRequest AccessRequest?
  createdAt     DateTime?      @default(now()) @map("created_at")

  @@index([usedByDid])
  @@index([recommenderId])
}

model UserMonth {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [did])
  monthStart DateTime
  monthEnd   DateTime

  wasActive Boolean
  value     Float

  paymentPromises PaymentPromise[]
  promisesCreated Boolean          @default(false)

  @@index([userId])
}

model Donation {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now()) @map("created_at")
  userById       String?
  userBy         User?    @relation(fields: [userById], references: [did])
  transactionId  String?
  amount         Int
  mpPreferenceId String?

  @@unique([mpPreferenceId])
  @@index([userById])
}

enum PromiseStatus {
  Pending
  Confirmed
  Payed
}

model PaymentPromise {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now()) @map("created_at")
  userMonth   UserMonth     @relation(fields: [userMonthId], references: [id])
  userMonthId String
  amount      Float
  status      PromiseStatus @default(Pending)
  contentId   String
  content     Content       @relation(fields: [contentId], references: [uri])

  @@unique([contentId, userMonthId])
  @@index([userMonthId])
  @@index([contentId])
}

model Topic {
  id                       String             @id
  protection               EditorStatus       @default(Beginner)
  versions                 TopicVersion[]
  currentVersion           TopicVersion?      @relation("currentVersion", fields: [currentVersionId], references: [uri])
  currentVersionId         String?            @unique
  referencedBy             Reference[]
  categories               TopicToCategory[]
  popularityScore          Int?               @default(1)
  popularityScoreLastDay   Int                @default(0)
  popularityScoreLastWeek  Int                @default(0)
  popularityScoreLastMonth Int                @default(0)
  lastEdit                 DateTime?          @updatedAt
  lastContentChange        DateTime?
  readSessions             ReadSession[]
  interactions             TopicInteraction[]

  @@index([popularityScoreLastDay(sort: Desc)])
  @@index([popularityScoreLastWeek(sort: Desc)])
  @@index([popularityScoreLastMonth(sort: Desc)])
  @@index([lastEdit(sort: Desc)])
}

model TopicVersion {
  uri              String         @id
  content          Content        @relation(fields: [uri], references: [uri])
  title            String?
  topic            Topic          @relation(fields: [topicId], references: [id])
  topicId          String
  message          String         @default("")
  synonyms         String?
  categories       String?
  authorship       Boolean        @default(true)
  currentVersionOf Topic?         @relation("currentVersion")
  charsAdded       Int?
  charsDeleted     Int?
  accCharsAdded    Int?
  contribution     String?
  diff             String?
  props            Json?
  prevAcceptedUri  String?
  prevAccepted     TopicVersion?  @relation("prevAccepted", fields: [prevAcceptedUri], references: [uri])
  nextVersions     TopicVersion[] @relation("prevAccepted")

  @@index([topicId])
}

model TopicCategory {
  id     String            @id
  topics TopicToCategory[]
  linksA CategoryLink[]    @relation("linksA")
  linksB CategoryLink[]    @relation("linksB")
}

model CategoryLink {
  idCategoryA String
  categoryA   TopicCategory @relation("linksA", fields: [idCategoryA], references: id)
  idCategoryB String
  categoryB   TopicCategory @relation("linksB", fields: [idCategoryB], references: id)

  @@id([idCategoryA, idCategoryB])
}

model TopicToCategory {
  topicId    String
  categoryId String
  topic      Topic         @relation(fields: [topicId], references: [id])
  category   TopicCategory @relation(fields: [categoryId], references: [id])

  @@id([topicId, categoryId])
}

model Record {
  uri             String   @id @unique
  cid             String?
  collection      String
  rkey            String
  author          User     @relation(fields: [authorId], references: [did])
  authorId        String
  createdAt       DateTime @default(now()) @map("created_at")
  content         Content?
  follow          Follow?
  dataset         Dataset?
  embeddedIn      Record?  @relation("embeddings", fields: [uri], references: [uri])
  embeddedRecords Record[] @relation("embeddings")
  record          String?

  reaction        Reaction?
  reactions       Reaction[]   @relation("reactions")
  uniqueReactions HasReacted[]

  uniqueLikesCount   Int @default(0)
  uniqueRepostsCount Int @default(0)
  uniqueAcceptsCount Int @default(0)
  uniqueRejectsCount Int @default(0)

  replies Post[] @relation("reply")
  rootOf  Post[] @relation("root")

  CAProfileOf User? @relation("CAProfile")

  notificationsGenerated Notification[]

  CAIndexedAt   DateTime @default(now())
  lastUpdatedAt DateTime @default(now())

  topicInteractions TopicInteraction[]

  @@index([authorId, createdAt(sort: Desc)])
  @@index([collection, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
}

model Content {
  uri                  String           @id
  record               Record           @relation(fields: [uri], references: [uri])
  text                 String?
  textBlobId           String?
  textBlob             Blob?            @relation(fields: [textBlobId], references: [cid])
  format               String?
  dbFormat             String?
  numWords             Int?
  topicVersion         TopicVersion?
  article              Article?
  post                 Post?
  references           Reference[]
  lastReferencesUpdate DateTime?
  selfLabels           String[]
  embeds               Json[]
  datasetsUsed         Dataset[]
  readSessions         ReadSession[]
  paymentPromises      PaymentPromise[]
}

model TopicInteraction {
  recordId String
  record   Record @relation(fields: [recordId], references: [uri])
  topicId  String
  topic    Topic  @relation(fields: [topicId], references: [id])

  @@unique([recordId, topicId])
}

model ReadSession {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation("readUser", fields: [userId], references: [did])
  createdAt       DateTime @default(now()) @map("created_at")
  readChunks      Json
  readContentId   String?
  readContent     Content? @relation(fields: [readContentId], references: [uri])
  contentAuthorId String
  contentAuthor   User     @relation("readAuthor", fields: [contentAuthorId], references: [did])
  topicId         String?
  topic           Topic?   @relation(fields: [topicId], references: [id])

  @@index([readContentId])
  @@index([userId])
}

model Post {
  uri       String   @id
  content   Content  @relation(fields: [uri], references: [uri])
  facets    String?
  embed     String?
  replyToId String?
  replyTo   Record?  @relation("reply", fields: [replyToId], references: [uri])
  quote     String?
  rootId    String?
  root      Record?  @relation("root", fields: [rootId], references: [uri])
  langs     String[]

  @@index([replyToId])
  @@index([rootId])
}

model Follow {
  uri            String  @id
  record         Record  @relation(fields: [uri], references: [uri])
  userFollowedId String?
  userFollowed   User?   @relation(fields: [userFollowedId], references: [did])

  @@index([userFollowedId])
}

model Reaction {
  uri       String  @id
  record    Record  @relation(fields: [uri], references: [uri])
  subjectId String?
  subject   Record? @relation("reactions", fields: [subjectId], references: [uri])

  voteReject VoteReject?

  @@index([subjectId])
}

model HasReacted {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [did])

  recordId String
  record   Record @relation(fields: [recordId], references: [uri])

  reactionType String

  @@unique([userId, recordId, reactionType])
  @@index([recordId])
}

model VoteReject {
  uri      String   @id
  reaction Reaction @relation(fields: [uri], references: [uri])
  message  String?
  labels   String[]
}

model Article {
  uri     String  @id
  content Content @relation(fields: [uri], references: [uri])
  title   String
}

model Dataset {
  uri         String      @id
  record      Record      @relation(fields: [uri], references: [uri])
  columns     String[]
  title       String
  dataBlocks  DataBlock[]
  description String?

  usedBy Content[]
}

model DataBlock {
  cid       String  @id
  blob      Blob    @relation(fields: [cid], references: [cid])
  datasetId String
  dataset   Dataset @relation(fields: [datasetId], references: [uri])
  format    String?
}

model Blob {
  cid       String     @id
  dataBlock DataBlock?

  author   User   @relation(fields: [authorId], references: [did])
  authorId String

  contentOf Content[]
}

model Reference {
  id                   String        @id @default(uuid())
  type                 ReferenceType
  count                Int           @default(1)
  referencedTopicId    String
  referencedTopic      Topic         @relation(fields: [referencedTopicId], references: [id])
  referencingContentId String
  referencingContent   Content       @relation(fields: [referencingContentId], references: [uri])

  @@unique([referencingContentId, referencedTopicId])
  @@index([referencingContentId])
  @@index([referencedTopicId])
}

enum ReferenceType {
  Strong
  Weak
}

model AccessRequest {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now()) @map("created_at")
  email        String
  comment      String
  sentInviteAt DateTime?
  inviteCodeId String?     @unique
  inviteCode   InviteCode? @relation(fields: [inviteCodeId], references: [code])

  @@index([inviteCodeId])
}

model Draft {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @map("created_at")
  lastUpdate DateTime @default(now())
  collection String
  text       String
  title      String?
  embeds     Json?
  author     User     @relation(fields: [authorId], references: [did])
  authorId   String

  @@index([authorId])
}

model Notification {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now()) @map("created_at")
  type      NotificationType

  userNotifiedId String
  userNotified   User   @relation(fields: [userNotifiedId], references: [did])

  causedByRecordId String // replies, edits, votes, mentions
  causedByRecord   Record @relation(fields: [causedByRecordId], references: [uri])

  message     String?
  moreContext String?

  reasonSubject String?

  @@unique([causedByRecordId, userNotifiedId])
  @@index([userNotifiedId])
}

model Meeting {
  id          String   @id @default(cuid())
  date        DateTime
  title       String
  url         String
  description String
  show        Boolean  @default(false)

  @@index([show])
}

enum EditorStatus {
  Beginner
  Editor
  Administrator
}

enum NotificationType {
  Reply
  Mention
  TopicEdit
  TopicVersionVote
}
